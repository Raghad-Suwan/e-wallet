{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n  if (nonce) {\n    script.nonce = nonce;\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\nconst loader = {\n  loadScript\n};\nclass RecaptchaLoaderService {\n  constructor(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, language, baseUrl, nonce, v3SiteKey) {\n    this.platformId = platformId;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n  }\n  /** @internal */\n  init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? \"&hl=\" + this.language : \"\";\n      const renderMode = this.v3SiteKey || \"explicit\";\n      loader.loadScript(renderMode, grecaptcha => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n    }\n  }\n}\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaLoaderService,\n  deps: [{\n    token: PLATFORM_ID\n  }, {\n    token: RECAPTCHA_LANGUAGE,\n    optional: true\n  }, {\n    token: RECAPTCHA_BASE_URL,\n    optional: true\n  }, {\n    token: RECAPTCHA_NONCE,\n    optional: true\n  }, {\n    token: RECAPTCHA_V3_SITE_KEY,\n    optional: true\n  }],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nRecaptchaLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaLoaderService\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaLoaderService,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }];\n  }\n});\nlet nextId = 0;\nclass RecaptchaComponent {\n  constructor(elementRef, loader, zone, settings) {\n    this.elementRef = elementRef;\n    this.loader = loader;\n    this.zone = zone;\n    this.id = `ngrecaptcha-${nextId++}`;\n    this.errorMode = \"default\";\n    this.resolved = new EventEmitter();\n    // The rename will happen a bit later\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    this.error = new EventEmitter();\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n  ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe(grecaptcha => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n  ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  execute() {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n  reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n      this.grecaptchaReset();\n    }\n  }\n  /**\n   * ⚠️ Warning! Use this property at your own risk!\n   *\n   * While this member is `public`, it is not a part of the component's public API.\n   * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n   * You are **strongly advised** against using this property.\n   * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n   */\n  get __unsafe_widgetValue() {\n    return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n  }\n  /** @internal */\n  expired() {\n    this.resolved.emit(null);\n  }\n  /** @internal */\n  errored(args) {\n    this.error.emit(args);\n  }\n  /** @internal */\n  captchaResponseCallback(response) {\n    this.resolved.emit(response);\n  }\n  /** @internal */\n  grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n  /** @internal */\n  renderRecaptcha() {\n    var _this = this;\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions = {\n      badge: this.badge,\n      callback: response => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type\n    };\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        _this.zone.run(() => _this.errored(args));\n      };\n    }\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n}\nRecaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaComponent,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: RecaptchaLoaderService\n  }, {\n    token: i0.NgZone\n  }, {\n    token: RECAPTCHA_SETTINGS,\n    optional: true\n  }],\n  target: i0.ɵɵFactoryTarget.Component\n});\nRecaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({\n  minVersion: \"14.0.0\",\n  version: \"14.0.3\",\n  type: RecaptchaComponent,\n  selector: \"re-captcha\",\n  inputs: {\n    id: \"id\",\n    siteKey: \"siteKey\",\n    theme: \"theme\",\n    type: \"type\",\n    size: \"size\",\n    tabIndex: \"tabIndex\",\n    badge: \"badge\",\n    errorMode: \"errorMode\"\n  },\n  outputs: {\n    resolved: \"resolved\",\n    error: \"error\"\n  },\n  host: {\n    properties: {\n      \"attr.id\": \"this.id\"\n    }\n  },\n  exportAs: [\"reCaptcha\"],\n  ngImport: i0,\n  template: ``,\n  isInline: true\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      exportAs: \"reCaptcha\",\n      selector: \"re-captcha\",\n      template: ``\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: RecaptchaLoaderService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_SETTINGS]\n      }]\n    }];\n  },\n  propDecorators: {\n    id: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: [\"attr.id\"]\n    }],\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    errorMode: [{\n      type: Input\n    }],\n    resolved: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }]\n  }\n});\nclass RecaptchaCommonModule {}\nRecaptchaCommonModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaCommonModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nRecaptchaCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaCommonModule,\n  declarations: [RecaptchaComponent],\n  exports: [RecaptchaComponent]\n});\nRecaptchaCommonModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaCommonModule\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaCommonModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    }]\n  }]\n});\nclass RecaptchaModule {}\nRecaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nRecaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaModule,\n  imports: [RecaptchaCommonModule],\n  exports: [RecaptchaComponent]\n});\nRecaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaModule,\n  providers: [RecaptchaLoaderService],\n  imports: [RecaptchaCommonModule]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      exports: [RecaptchaComponent],\n      imports: [RecaptchaCommonModule],\n      providers: [RecaptchaLoaderService]\n    }]\n  }]\n});\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n  constructor(zone, siteKey,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, baseUrl, nonce, language) {\n    /** @internal */\n    this.onLoadComplete = grecaptcha => {\n      this.grecaptcha = grecaptcha;\n      if (this.actionBacklog && this.actionBacklog.length > 0) {\n        this.actionBacklog.forEach(_ref => {\n          let [action, subject] = _ref;\n          return this.executeActionWithSubject(action, subject);\n        });\n        this.actionBacklog = undefined;\n      }\n    };\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.init();\n  }\n  get onExecute() {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n    return this.onExecuteObservable;\n  }\n  get onExecuteError() {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n    return this.onExecuteErrorObservable;\n  }\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  execute(action) {\n    const subject = new Subject();\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n    return subject.asObservable();\n  }\n  /** @internal */\n  executeActionWithSubject(action, subject) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = error => {\n      this.zone.run(() => {\n        subject.error(error);\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({\n            action,\n            error\n          });\n        }\n      });\n    };\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha.execute(this.siteKey, {\n          action\n        }).then(token => {\n          this.zone.run(() => {\n            subject.next(token);\n            subject.complete();\n            if (this.onExecuteSubject) {\n              this.onExecuteSubject.next({\n                action,\n                token\n              });\n            }\n          });\n        }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n  /** @internal */\n  init() {\n    if (this.isBrowser) {\n      if (\"grecaptcha\" in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        const langParam = this.language ? \"&hl=\" + this.language : \"\";\n        loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n      }\n    }\n  }\n}\nReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: ReCaptchaV3Service,\n  deps: [{\n    token: i0.NgZone\n  }, {\n    token: RECAPTCHA_V3_SITE_KEY\n  }, {\n    token: PLATFORM_ID\n  }, {\n    token: RECAPTCHA_BASE_URL,\n    optional: true\n  }, {\n    token: RECAPTCHA_NONCE,\n    optional: true\n  }, {\n    token: RECAPTCHA_LANGUAGE,\n    optional: true\n  }],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: ReCaptchaV3Service\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: ReCaptchaV3Service,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }];\n  }\n});\nclass RecaptchaV3Module {}\nRecaptchaV3Module.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaV3Module,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nRecaptchaV3Module.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaV3Module\n});\nRecaptchaV3Module.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaV3Module,\n  providers: [ReCaptchaV3Service]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaV3Module,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      providers: [ReCaptchaV3Service]\n    }]\n  }]\n});\nclass RecaptchaValueAccessorDirective {\n  constructor(host) {\n    this.host = host;\n    this.requiresControllerReset = false;\n  }\n  writeValue(value) {\n    if (!value) {\n      this.host.reset();\n    } else {\n      // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n      // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n      // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n      // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n      // we'll be telling the controller to \"reset\" the value back to null.\n      if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n        this.requiresControllerReset = true;\n      }\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n    if (this.requiresControllerReset) {\n      this.requiresControllerReset = false;\n      this.onChange(null);\n    }\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  onResolve($event) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n}\nRecaptchaValueAccessorDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaValueAccessorDirective,\n  deps: [{\n    token: RecaptchaComponent\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nRecaptchaValueAccessorDirective.ɵdir = i0.ɵɵngDeclareDirective({\n  minVersion: \"14.0.0\",\n  version: \"14.0.3\",\n  type: RecaptchaValueAccessorDirective,\n  selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n  host: {\n    listeners: {\n      \"resolved\": \"onResolve($event)\"\n    }\n  },\n  providers: [{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n  }],\n  ngImport: i0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaValueAccessorDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }],\n      selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\"\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: RecaptchaComponent\n    }];\n  },\n  propDecorators: {\n    onResolve: [{\n      type: HostListener,\n      args: [\"resolved\", [\"$event\"]]\n    }]\n  }\n});\nclass RecaptchaFormsModule {}\nRecaptchaFormsModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaFormsModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nRecaptchaFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaFormsModule,\n  declarations: [RecaptchaValueAccessorDirective],\n  imports: [FormsModule, RecaptchaCommonModule],\n  exports: [RecaptchaValueAccessorDirective]\n});\nRecaptchaFormsModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaFormsModule,\n  imports: [FormsModule, RecaptchaCommonModule]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.3\",\n  ngImport: i0,\n  type: RecaptchaFormsModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaValueAccessorDirective],\n      exports: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule]\n    }]\n  }]\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };","map":{"version":3,"mappings":"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","names":["RECAPTCHA_LANGUAGE","InjectionToken","RECAPTCHA_BASE_URL","RECAPTCHA_NONCE","RECAPTCHA_SETTINGS","RECAPTCHA_V3_SITE_KEY","loadScript","renderMode","onLoaded","urlParams","url","nonce","window","ng2recaptchaloaded","grecaptcha","script","document","createElement","innerHTML","baseUrl","src","async","defer","head","appendChild","loader","RecaptchaLoaderService","constructor","platformId","language","v3SiteKey","init","ready","isPlatformBrowser","asObservable","of","subject","BehaviorSubject","langParam","next","deps","token","PLATFORM_ID","optional","target","decorators","Injectable","Object","Inject","Optional","nextId","RecaptchaComponent","elementRef","zone","settings","EventEmitter","siteKey","theme","type","size","badge","ngAfterViewInit","subscription","subscribe","render","Function","renderRecaptcha","ngOnDestroy","grecaptchaReset","unsubscribe","execute","widget","executeRequested","reset","getResponse","resolved","emit","__unsafe_widgetValue","expired","errored","args","error","captchaResponseCallback","response","runOutsideAngular","renderOptions","callback","run","sitekey","tabindex","tabIndex","errorMode","nativeElement","minVersion","version","ngImport","selector","inputs","id","outputs","host","properties","exportAs","template","isInline","Component","Input","HostBinding","Output","RecaptchaCommonModule","declarations","exports","NgModule","RecaptchaModule","imports","providers","ReCaptchaV3Service","actionBacklog","length","forEach","action","executeActionWithSubject","undefined","isBrowser","onExecute","onExecuteSubject","Subject","onExecuteObservable","onExecuteError","onExecuteErrorSubject","onExecuteErrorObservable","push","onError","then","complete","e","onLoadComplete","RecaptchaV3Module","RecaptchaValueAccessorDirective","writeValue","value","Boolean","requiresControllerReset","registerOnChange","fn","onChange","registerOnTouched","onTouched","onResolve","$event","listeners","multi","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Directive","HostListener","RecaptchaFormsModule","FormsModule"],"sources":["C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\tokens.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\load-script.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha-loader.service.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha.component.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha-common.module.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha.module.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha-v3.service.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha-v3.module.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha-value-accessor.directive.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\lib\\recaptcha-forms.module.ts","C:\\Users\\HP\\OneDrive\\سطح المكتب\\wallet\\projects\\ng-recaptcha\\src\\ng-recaptcha.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\n\nimport { RecaptchaSettings } from \"./recaptcha-settings\";\n\nexport const RECAPTCHA_LANGUAGE = new InjectionToken<string>(\"recaptcha-language\");\nexport const RECAPTCHA_BASE_URL = new InjectionToken<string>(\"recaptcha-base-url\");\nexport const RECAPTCHA_NONCE = new InjectionToken<string>(\"recaptcha-nonce-tag\");\nexport const RECAPTCHA_SETTINGS = new InjectionToken<RecaptchaSettings>(\"recaptcha-settings\");\nexport const RECAPTCHA_V3_SITE_KEY = new InjectionToken<string>(\"recaptcha-v3-site-key\");\n","declare global {\n  interface Window {\n    ng2recaptchaloaded: () => void;\n  }\n}\n\nfunction loadScript(\n  renderMode: \"explicit\" | string,\n  onLoaded: (grecaptcha: ReCaptchaV2.ReCaptcha) => void,\n  urlParams: string,\n  url?: string,\n  nonce?: string\n): void {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n  if (nonce) {\n    script.nonce = nonce;\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\nexport const loader = { loadScript };\n","import { isPlatformBrowser } from \"@angular/common\";\nimport { Inject, Injectable, Optional, PLATFORM_ID } from \"@angular/core\";\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\n\nimport { loader } from \"./load-script\";\nimport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_V3_SITE_KEY } from \"./tokens\";\n\n@Injectable()\nexport class RecaptchaLoaderService {\n  /**\n   * @internal\n   * @nocollapse\n   */\n  private static ready: BehaviorSubject<ReCaptchaV2.ReCaptcha> = null;\n\n  public ready: Observable<ReCaptchaV2.ReCaptcha>;\n\n  /** @internal */\n  private language: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private v3SiteKey: string;\n\n  constructor(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    @Inject(PLATFORM_ID) private readonly platformId: Object,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n    @Optional() @Inject(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: string\n  ) {\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n  }\n\n  /** @internal */\n  private init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject<ReCaptchaV2.ReCaptcha>(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? \"&hl=\" + this.language : \"\";\n\n      const renderMode = this.v3SiteKey || \"explicit\";\n      loader.loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { RecaptchaLoaderService } from \"./recaptcha-loader.service\";\nimport { RecaptchaSettings } from \"./recaptcha-settings\";\nimport { RECAPTCHA_SETTINGS } from \"./tokens\";\n\nlet nextId = 0;\n\nexport type NeverUndefined<T> = T extends undefined ? never : T;\n\nexport type RecaptchaErrorParameters = Parameters<NeverUndefined<ReCaptchaV2.Parameters[\"error-callback\"]>>;\n\n@Component({\n  exportAs: \"reCaptcha\",\n  selector: \"re-captcha\",\n  template: ``,\n})\nexport class RecaptchaComponent implements AfterViewInit, OnDestroy {\n  @Input()\n  @HostBinding(\"attr.id\")\n  public id = `ngrecaptcha-${nextId++}`;\n\n  @Input() public siteKey: string;\n  @Input() public theme: ReCaptchaV2.Theme;\n  @Input() public type: ReCaptchaV2.Type;\n  @Input() public size: ReCaptchaV2.Size;\n  @Input() public tabIndex: number;\n  @Input() public badge: ReCaptchaV2.Badge;\n  @Input() public errorMode: \"handled\" | \"default\" = \"default\";\n\n  @Output() public resolved = new EventEmitter<string>();\n  // The rename will happen a bit later\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public error = new EventEmitter<RecaptchaErrorParameters>();\n\n  /** @internal */\n  private subscription: Subscription;\n  /** @internal */\n  private widget: number;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n  /** @internal */\n  private executeRequested: boolean;\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private loader: RecaptchaLoaderService,\n    private zone: NgZone,\n    @Optional() @Inject(RECAPTCHA_SETTINGS) settings?: RecaptchaSettings\n  ) {\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n\n  public ngAfterViewInit(): void {\n    this.subscription = this.loader.ready.subscribe((grecaptcha: ReCaptchaV2.ReCaptcha) => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n\n  public ngOnDestroy(): void {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  public execute(): void {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n\n  public reset(): void {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n\n      this.grecaptchaReset();\n    }\n  }\n\n  /**\n   * ⚠️ Warning! Use this property at your own risk!\n   *\n   * While this member is `public`, it is not a part of the component's public API.\n   * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n   * You are **strongly advised** against using this property.\n   * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n   */\n  public get __unsafe_widgetValue(): string | null {\n    return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n  }\n\n  /** @internal */\n  private expired() {\n    this.resolved.emit(null);\n  }\n\n  /** @internal */\n  private errored(args: RecaptchaErrorParameters) {\n    this.error.emit(args);\n  }\n\n  /** @internal */\n  private captchaResponseCallback(response: string) {\n    this.resolved.emit(response);\n  }\n\n  /** @internal */\n  private grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n\n  /** @internal */\n  private renderRecaptcha() {\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions: ReCaptchaV2.Parameters = {\n      badge: this.badge,\n      callback: (response: string) => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type,\n    };\n\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = (...args: RecaptchaErrorParameters) => {\n        this.zone.run(() => this.errored(args));\n      };\n    }\n\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { RecaptchaComponent } from \"./recaptcha.component\";\n\n@NgModule({\n  declarations: [RecaptchaComponent],\n  exports: [RecaptchaComponent],\n})\nexport class RecaptchaCommonModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { RecaptchaCommonModule } from \"./recaptcha-common.module\";\nimport { RecaptchaLoaderService } from \"./recaptcha-loader.service\";\nimport { RecaptchaComponent } from \"./recaptcha.component\";\n\n@NgModule({\n  exports: [RecaptchaComponent],\n  imports: [RecaptchaCommonModule],\n  providers: [RecaptchaLoaderService],\n})\nexport class RecaptchaModule {}\n","import { isPlatformBrowser } from \"@angular/common\";\nimport { Inject, Injectable, NgZone, Optional, PLATFORM_ID } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\n\nimport { loader } from \"./load-script\";\nimport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_V3_SITE_KEY } from \"./tokens\";\n\nexport interface OnExecuteData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The token that reCAPTCHA v3 provided when executing the action.\n   */\n  token: string;\n}\n\nexport interface OnExecuteErrorData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The error which was encountered\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error: any;\n}\n\ntype ActionBacklogEntry = [string, Subject<string>];\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\n@Injectable()\nexport class ReCaptchaV3Service {\n  /** @internal */\n  private readonly isBrowser: boolean;\n  /** @internal */\n  private readonly siteKey: string;\n  /** @internal */\n  private readonly zone: NgZone;\n  /** @internal */\n  private actionBacklog: ActionBacklogEntry[] | undefined;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private language?: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n\n  /** @internal */\n  private onExecuteSubject: Subject<OnExecuteData>;\n  /** @internal */\n  private onExecuteErrorSubject: Subject<OnExecuteErrorData>;\n  /** @internal */\n  private onExecuteObservable: Observable<OnExecuteData>;\n  /** @internal */\n  private onExecuteErrorObservable: Observable<OnExecuteErrorData>;\n\n  constructor(\n    zone: NgZone,\n    @Inject(RECAPTCHA_V3_SITE_KEY) siteKey: string,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string\n  ) {\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n\n    this.init();\n  }\n\n  public get onExecute(): Observable<OnExecuteData> {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject<OnExecuteData>();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n\n    return this.onExecuteObservable;\n  }\n\n  public get onExecuteError(): Observable<OnExecuteErrorData> {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject<OnExecuteErrorData>();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n\n    return this.onExecuteErrorObservable;\n  }\n\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  public execute(action: string): Observable<string> {\n    const subject = new Subject<string>();\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n\n    return subject.asObservable();\n  }\n\n  /** @internal */\n  private executeActionWithSubject(action: string, subject: Subject<string>): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = (error: any) => {\n      this.zone.run(() => {\n        subject.error(error);\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({ action, error });\n        }\n      });\n    };\n\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha.execute(this.siteKey, { action }).then((token: string) => {\n          this.zone.run(() => {\n            subject.next(token);\n            subject.complete();\n            if (this.onExecuteSubject) {\n              this.onExecuteSubject.next({ action, token });\n            }\n          });\n        }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n\n  /** @internal */\n  private init() {\n    if (this.isBrowser) {\n      if (\"grecaptcha\" in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        const langParam = this.language ? \"&hl=\" + this.language : \"\";\n        loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n      }\n    }\n  }\n\n  /** @internal */\n  private onLoadComplete = (grecaptcha: ReCaptchaV2.ReCaptcha) => {\n    this.grecaptcha = grecaptcha;\n    if (this.actionBacklog && this.actionBacklog.length > 0) {\n      this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n      this.actionBacklog = undefined;\n    }\n  };\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { ReCaptchaV3Service } from \"./recaptcha-v3.service\";\n\n@NgModule({\n  providers: [ReCaptchaV3Service],\n})\nexport class RecaptchaV3Module {}\n","import { Directive, forwardRef, HostListener } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\nimport { RecaptchaComponent } from \"./recaptcha.component\";\n\n@Directive({\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n    },\n  ],\n  selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n})\nexport class RecaptchaValueAccessorDirective implements ControlValueAccessor {\n  /** @internal */\n  private onChange: (value: string) => void;\n\n  /** @internal */\n  private onTouched: () => void;\n\n  private requiresControllerReset = false;\n\n  constructor(private host: RecaptchaComponent) {}\n\n  public writeValue(value: string): void {\n    if (!value) {\n      this.host.reset();\n    } else {\n      // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n      // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n      // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n      // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n      // we'll be telling the controller to \"reset\" the value back to null.\n      if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n        this.requiresControllerReset = true;\n      }\n    }\n  }\n\n  public registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n    if (this.requiresControllerReset) {\n      this.requiresControllerReset = false;\n      this.onChange(null);\n    }\n  }\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  @HostListener(\"resolved\", [\"$event\"]) public onResolve($event: string): void {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { RecaptchaCommonModule } from \"./recaptcha-common.module\";\nimport { RecaptchaValueAccessorDirective } from \"./recaptcha-value-accessor.directive\";\n\n@NgModule({\n  declarations: [RecaptchaValueAccessorDirective],\n  exports: [RecaptchaValueAccessorDirective],\n  imports: [FormsModule, RecaptchaCommonModule],\n})\nexport class RecaptchaFormsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}